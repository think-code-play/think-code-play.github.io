<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <link rel="stylesheet" type="text/css" href="style.css">
    <title>Think, code, play</title>
</head>
<body>

    <H1>Think, code, play</H1>
    <h2>Le choc des titans</h2>

    <h3><span>Version 1</span> : Mode console, les deux personnages sont incarnés par le programme.</h3>

    <p>Application en mode console. L'ordinateur joue les deux personnages. A chaque tour, chaque personnage inflige des dégats à l'autre. Le premier à passer sous la barre de 0 points de vie à perdu.</p>

    <p>Les étapes se font les unes à la suite des autres.</p>

    <p>Langage d'implémentation au choix !</p>

    <h4>Étape 1 : </h4>
    <p>Faire un programme qui affiche la ligne "Bienvenue dans le CHOC des TITANS".</p>

    <h4>Étape 2 : </h4>
    <p>Créer les variables <span class="code">pv_perso_1</span> et <span class="code">pv_perso_2</span> initialisées à la valeur <span class="code">100</span> pour représenter les points de vie des deux personnages.</p>

    <p>Le programme doit afficher "Personnage 1 : 100 PV" et "Personnage 2 : 100 PV" en utilisant les variables correspondantes.</p>

    <h4>Étape 3 : </h4>

    <p>Trouver dans la documentation du langage comment récupérer une valeur aléatoire entre 1 et 10.</p>
    <p>Créer les variables <span class="code">force_perso_1</span> et <span class="code">force_perso_2</span> chacune initialisée avec une valeur aléatoire entre 1 et 10.</p>
    
    <p>Soustraire aux point de vie du personnage 1 la force du personnage 2 et inversement. Attention il faut garder l'initialition des points de vie et faire la soustraction à la suite.</p>

    <p>Le programme doit afficher les points de vie restants de chaque personnage.</p>


    <h4>Étape 4 : </h4>
    <p>Aller boire un café.</p>

    <h4>Étape 5 : </h4>
    <p>Faire une boucle de 5 itérations qui englobe : calcul de la force (entre 1 et 10), soustraction des points de vie et affichage des PV restants. Attention, l'initialisation des points de vie de l'étape 2 est hors de la boucle.</p>
    <p>Le jeu tourne donc pendant 5 tours.</p>

    <h4>Étape 6 : </h4>
    <p>Après la boucle, ajouter des conditions pour déterminer le gagnant : si les deux personnages ont autant de points de vie, afficher un message d'ex-aequo; Sinon afficher le personnage qui a le plus de point de vie restants.</p>

    <h4>Étape 7 : </h4>
    <p>Aller boire un autre café.</p>

    <h4>Étape 8 : </h4>
    <p>Changer de boucle pour faire une boucle "tant que" : tant que les deux personnages ont plus de 0 PV, continuer. Quand au moins un personnage à 0 ou moins PV, afficher le message ex-aequo/gagnant.</p>

    <h4>Étape 9 : </h4>
    <p>Savourer ce moment.</p>

    <h4>Étape 10 : </h4>
    <p>Créer des variables <span class="code">nom_perso_1</span> et <span class="code">nom_perso_2</span> et les initialiser avec les noms des personnages "Perso 1" et "Perso 2" (ou autre).</p>
    <p>Faire en sorte que les message qui affiche les PV et les messages de fin utilise le nom contenu dans ces variables.</p> 

    <h4>Étape 11 : </h4>
    <p>Trouver dans la documentation  du langage une fonction qui permet de récuperer une chaine de caractère saisie par l'utilisateur.</p>
    <p>Initialiser les variables <span class="code">nom_perso_1</span> et <span class="code">nom_perso_2</span> avec des valeurs saisies par l'utilisateur.</p>

    <h4>Défi : </h4>
    <p>Créer une variable <span class="code">multiplicateur_perso_1</span> et <span class="code">multiplicateur_perso_2</span> chacune initialisée à <span class="code">1</span>.</p>
    
    <p>A chaque tour, multiplier les dégats avec la variable correspondante. Pour le moment ça ne change rien, c'est normal.</p>

    <p>Au début du jeu, chaque personnage à 1 chance sur 2 de faire systematiquement 3 fois plus de dégat que la normale. Comment faire ?</p>


    <h3><span>Version 2</span> : Refactoring en classes.</h3>

    <h4>Étape 1 : </h4>
    <p>TBD.</p>

</body>
</html>